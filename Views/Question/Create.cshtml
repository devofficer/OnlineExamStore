@using OnlineExam.Infrastructure
@model OnlineExam.Models.QuestionBank

@{
    ViewBag.Title = "Create";
}
@*<script type="text/javascript">
    window.MathJax = {
        showProcessingMessages: true,
        messageStyle: "none",
        tex2jax: {
            inlineMath: [['$', '$'], ["\\(", "\\)"]],
            processEscapes: true
        },
        "fast-preview": { disabled: true },
        CommonHTML: { linebreaks: { automatic: true } },
        "HTML-CSS": { linebreaks: { automatic: true } },
        SVG: { linebreaks: { automatic: true } },
        TeX: { noErrors: { disabled: true } },
        MathMenu: {
            styles: {
                ".MathJax_Menu": { "z-index": 2001 }
            }
        },
        AuthorInit: function () {
            MathJax.Hub.Register.StartupHook("MathMenu Ready", function () { MathJax.Menu.BGSTYLE["z-index"] = 2000; });
            MathJax.Hub.processSectionDelay = 0;
        }
    }
</script>*@
<script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML-full"></script>
@*<link href="~/Scripts/ckeditor/contents.css" rel="stylesheet" />*@

<style>
    .radio, .radio-inline {
        padding-top: 0px;
        margin-top: 0;
        margin-bottom: 0;
    }

    .modal-dialog {
        position: absolute;
        top: 50% !important;
        -moz-transform: translate(0, -50%) !important;
        -o-transform: translate(0, -50%) !important;
        -ms-transform: translate(0, -50%) !important;
        -webkit-transform: translate(0, -50%) !important;
        transform: translate(0, -50%) !important;
        margin: auto 5%;
        width: 90%;
        height: 80%;
    }

    .modal-header {
        border-bottom: 1px solid #e5e5e5 !important;
        min-height: 16.4286px;
        padding-top: 0px;
        padding-bottom: 0px;
    }

    .modal-content {
        /*height: 100%;*/
        -ms-border-radius: 0;
        border-radius: 0;
        /*color: white;*/
        overflow: auto;
    }

    .modal-title {
        font-size: 2.2em;
        font-weight: 300;
        margin: 10px 0 0;
    }

    .modal-body {
        padding: 10px;
        position: relative;
    }

    .modal-footer {
        border-top: 1px solid #e5e5e5;
        margin-top: 15px;
        padding: 15px 10px 10px;
        text-align: right;
    }

    .selected {
        background-color: brown;
        color: #FFF;
    }
</style>
<script type="text/javascript">
    $(document).ready(function () {
        var editor = CKEDITOR.replace('AnswerDescription',
        {
            uiColor: '#13D747',
        });


        //$('#frmCreateQuestion').on('submit', function () {
        //    debugger;
        //    var data = CKEDITOR.instances['Decription'].getData();
        //    alert(data);

        //    var data = CKEDITOR.instances['Decription'].document.getBody().getText();
        //    alert(data);

        //    for (instance in CKEDITOR.instances) {
        //        CKEDITOR.instances[instance].val(data);
        //    }
        //});


        //$('#modal-content').modal('show');
        //$('#modal-content').on('shown', function() {
        //    $("#txtname").focus();
        //});
        $('#btnPreview').click(function () {

            //alert(CKEDITOR.instances['AnswerDescription'].getData());
            $('#modal-content').modal({
                show: true
            });
            $('#modal-content').on('shown.bs.modal', function () {
                //$("#lblDescription").html(CKEDITOR.instances['Decription'].getData());

                $("#questionDescription").html(CKEDITOR.instances['Decription'].getData());
                $("#optionA").html(CKEDITOR.instances['OptionA'].getData()).addClass("math-tex");
                $("#optionB").html(CKEDITOR.instances['OptionB'].getData());
                $("#optionC").html(CKEDITOR.instances['OptionC'].getData());
                $("#optionD").html(CKEDITOR.instances['OptionD'].getData());
                $("#optionE").html(CKEDITOR.instances['OptionE'].getData());

                alert($("#ClassName option:selected").text());
                $("#answerOption").text($("#AnswerOption option:selected").text());
                $("#answerDescription").html(CKEDITOR.instances['AnswerDescription'].getData());
                $("#className").text($("#ClassName option:selected").text());
                $("#examName").text($("#ExamName option:selected").text());
                $("#subject").text($("#Subject option:selected").text());
                $("#questionFormat").text($("#QuestionFormat option:selected").text());
            });
        });

        $(document).on('change', '#ClassName', function () {
            $.getJSON('/Question/GetCategoriesByClassType/', { classType: $('#ClassName').val() },
               function (data) {
                   var items = '<option>Select Exam Category</option>';
                   $.each(data, function (i, state) {
                       items += "<option value='" + state.Value + "'>" + state.Text + "</option>";
                   });
                   $('#ExamName').html(items);
               }
           );
        });

        $(document).on('change', '[id*=ExamName]', function () {
            $.getJSON('/Question/GetSubjectsByCategoryType/', { categoryType: $('[id*=ExamName]').val() },
                function (data) {
                    var items = '<option>Select Subject</option>';
                    $.each(data, function (i, state) {
                        items += "<option value='" + state.Value + "'>" + state.Text + "</option>";
                    });
                    $('[id*=Subject]').html(items);
                }
            );
        });

        $(document).on('change', '#Subject', function () {
            $.getJSON('/Question/GetTopicsBySubject/', { subject: $('#Subject').val() },
                function (data) {
                    var items = '<option value="">Select Topic</option>';
                    $.each(data, function (i, state) {
                        items += "<option value='" + state.Value + "'>" + state.Text + "</option>";
                    });
                    $('#TopicId').html(items);
                }
            );
        });

        init();
        function init() {
            //debugger;
            var subject = $("#Subject").val();
            //alert(subject);
            //if (subject == "MATHEMATICS") {
            //    if (CKEDITOR) {
            //        if (CKEDITOR.instances.Decription) {
            //            // Switch to "source" view.
            //            CKEDITOR.instances.Decription.setMode('source');
            //            CKEDITOR.instances.OptionA.setMode('source');
            //            CKEDITOR.instances.OptionB.setMode('source');
            //            CKEDITOR.instances.OptionC.setMode('source');
            //            CKEDITOR.instances.OptionD.setMode('source');
            //            CKEDITOR.instances.OptionE.setMode('source');
            //        }
            //    }
            //}
            //else {
            //    if (CKEDITOR) {
            //        if (CKEDITOR.instances.Decription) {
            //            // Switch to "wysiwyg" view and be notified on completion.
            //            CKEDITOR.instances.Decription.setMode('wysiwyg', function () { alert('wysiwyg mode loaded!'); });
            //            CKEDITOR.instances.OptionA.setMode('wysiwyg', function () { alert('wysiwyg mode loaded!'); });
            //            CKEDITOR.instances.OptionB.setMode('wysiwyg', function () { alert('wysiwyg mode loaded!'); });
            //            CKEDITOR.instances.OptionC.setMode('wysiwyg', function () { alert('wysiwyg mode loaded!'); });
            //            CKEDITOR.instances.OptionD.setMode('wysiwyg', function () { alert('wysiwyg mode loaded!'); });
            //            CKEDITOR.instances.OptionE.setMode('wysiwyg', function () { alert('wysiwyg mode loaded!'); });
            //        }
            //    }
            //}

        }

        $("#Subject").change(function () {
            init();
        });
    });
</script>
<div class="page-head">
    <h3>Create Question</h3>
    <ol class="breadcrumb">
        <li>@Html.ActionLink("Home", "Dashboard", "Account")</li>
        <li>
            <a href="@Url.Action("Index", "Question")" title="Question Bank">Question Bank</a>
        </li>
        <li class="active">Create</li>
    </ol>
</div>
@using (Html.BeginForm("Create", "Question", FormMethod.Post, new { id = "frmCreateQuestion", enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal  block-flat">
        <div class="row">
            <div class="col-md-12">
                @Html.ValidationSummary(true)
            </div>
        </div>
        <div class="row">
            <div class="col-md-2">
                @Html.DropDownListFor(model => model.ClassName, Model.ClasseTypes, "Select Class", new { @class = "form-control" })
            </div>
            <div class="col-md-2">
                @Html.DropDownListFor(model => model.ExamName, Model.ExamTypes, "Select Exam Category", new { @class = "form-control" })
            </div>
            <div class="col-md-2">
                @Html.DropDownListFor(model => model.Subject, Model.Subjects, "Select Subject", new { @class = "form-control" })
            </div>
            <div class="col-md-2">
                <select name="TopicId" id="TopicId" class = "form-control">
                    <option value="">Select Topic</option>
                </select>
            </div>
            <div class="col-md-2">
                @Html.DropDownListFor(model => model.QuestionFormat, Model.QuestionFormats, "Select Question Format", new { @class = "form-control" })
            </div>
            <div class="col-md-2 text-right">
                <a href="#" class="btn btn-warning" title="Preview" id="btnPreview"><span class="glyphicon glyphicon-zoom-in"></span></a>
                <button type="submit" name="command" value="Create" class="btn btn-success">
                    <span class="fa fa-floppy-o"></span>
                </button>
                <a href="@Url.Action("Index", "Question")" class="btn btn-primary" title="Back to List"><span class="fa fa-long-arrow-left"></span></a>
            </div>
        </div>
        <div class="row">
            <div class="col-md-2">
                @Html.DropDownListFor(model => model.Mark, new SelectList(ViewBag.Marks), "Select Mark", new { @class = "form-control" })
            </div>
            <div class="col-md-3">
                <div class="col-md-4">
                    @Html.LabelFor(model => model.DurationInSecond, new { @class = "control-label" })
                </div>
                <div class="col-md-8">
                    @Html.TextBoxFor(model => model.DurationInSecond, "Duration", new { @class = "form-control", placeholder = "Duration In Second" })
                </div>
            </div>
                <div class="col-md-2">
                    @Html.CheckBoxFor(model => model.IsOnline, new { @class = "checkbox checkbox-inline" })@Html.LabelFor(model => model.IsOnline, new { @class = "control-label" })
                </div>
            </div>
        <div class="row">
            <hr />
        </div>
        <div class="row">
            <div class="col-md-12">
                @Html.LabelFor(model => model.Decription, new { @class = "col-md-4" })
                <div class="col-md-12">
                    @Html.ValidationMessageFor(model => model.Decription)
                    @Html.TextAreaFor(model => model.Decription, new { @class = "form-control ckeditor" })
                </div>
            </div>
            @*<div class="col-md-6">
                    @Html.LabelFor(model => model.AnswerDescription, new { @class = "col-md-4" })
                    <div class="col-md-12">
                        @Html.ValidationMessageFor(model => model.AnswerDescription)
                        @Html.TextAreaFor(model => model.AnswerDescription, new { @class = "form-control ckeditor" })
                    </div>
                </div>*@
        </div>
        <div class="row">
            <div id="modal-content" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal">×</button>
                            <h2 class="modal-title">Question Preview:</h2>
                        </div>
                        <div class="modal-body">
                            <div class="table-responsive">
                                <table class="table table-condensed table-bordered">
                                    <tr>
                                        <td><strong>Question Description:</strong></td>
                                        <td><span id="questionDescription"></span></td>
                                    </tr>
                                    <tr>
                                        <td><strong>Options:</strong></td>
                                        <td>
                                            <div class="form-group">
                                                <div class="col-md-3">
                                                    <strong>A.</strong>&nbsp;<span id="optionA"></span>
                                                </div>
                                                <div class="col-md-3"><strong>B.</strong>&nbsp;<span id="optionB"></span></div>
                                                <div class="col-md-3">
                                                    <strong>C.</strong>&nbsp;<span id="optionC"></span>
                                                </div>
                                                <div class="col-md-3">
                                                    <strong>D.</strong>&nbsp;<span id="optionD"></span>
                                                </div>
                                                @if (!string.IsNullOrWhiteSpace(@Model.OptionE))
                                                {
                                                    <div class="col-md-3">
                                                        <strong>E.</strong>&nbsp;<span id="optionE"></span>
                                                    </div>
                                                }
                                            </div>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td><strong>Answer:</strong></td>
                                        <td>[<span id="answerOption"></span>] &nbsp;<span id="answerDescription"></span></td>
                                    </tr>
                                    <tr>
                                        <td><strong>Class Name:</strong> </td>
                                        <td><span id="className"></span></td>
                                    </tr>
                                    <tr>
                                        <td><strong>Exam Name:</strong> </td>
                                        <td><span id="examName"></span></td>
                                    </tr>
                                    <tr>
                                        <td><strong>Subject:</strong></td>
                                        <td> <span id="subject"></span></td>
                                    </tr>
                                    <tr>
                                        <td><strong>Question Format:</strong> </td>
                                        <td><span id="questionFormat"></span></td>
                                    </tr>
                                </table>

                            </div>
                        </div>
                        <div class="modal-footer">
                            <a href="#" class="btn btn-primary" data-dismiss="modal">Close</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        @*<div class="form-group">
                @Html.LabelFor(model => model.ImagePath, new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ImagePath)
                    @Html.ValidationMessageFor(model => model.ImagePath)
                </div>
            </div>*@
        <div class="row">
            <div class="col-md-6">
                @Html.LabelFor(model => model.OptionA, new { @class = "col-md-3" })
                <div class="col-md-12">
                    @Html.ValidationMessageFor(model => model.OptionA)
                    @Html.TextAreaFor(model => model.OptionA, new { @class = "form-control ckeditor" })
                </div>
            </div>
            <div class="col-md-6">
                @Html.LabelFor(model => model.OptionB, new { @class = "col-md-3" })
                <div class="col-md-12">
                    @Html.ValidationMessageFor(model => model.OptionB)
                    @Html.TextAreaFor(model => model.OptionB, new { @class = "form-control ckeditor" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                @Html.LabelFor(model => model.OptionC, new { @class = "col-md-3" })
                <div class="col-md-12">
                    @Html.ValidationMessageFor(model => model.OptionC)
                    @Html.TextAreaFor(model => model.OptionC, new { @class = "form-control ckeditor" })
                </div>
            </div>
            <div class="col-md-6">
                @Html.LabelFor(model => model.OptionD, new { @class = "col-md-3" })
                <div class="col-md-12">
                    @Html.ValidationMessageFor(model => model.OptionD)
                    @Html.TextAreaFor(model => model.OptionD, new { @class = "form-control ckeditor" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                @Html.LabelFor(model => model.OptionE, new { @class = "col-md-3" })
                <div class="col-md-12">
                    @Html.ValidationMessageFor(model => model.OptionE)
                    @Html.TextAreaFor(model => model.OptionE, new { @class = "form-control ckeditor" })
                </div>
            </div>
            <div class="col-md-6">
                @Html.LabelFor(model => model.AnswerDescription, new { @class = "col-md-4" })
                <div class="col-md-12">
                    @Html.ValidationMessageFor(model => model.AnswerDescription)
                    @Html.TextAreaFor(model => model.AnswerDescription, new { @class = "form-control ckeditor", id = "txtAnswerDescription" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                @Html.LabelFor(model => model.AnswerOption, new { @class = "col-md-12" })
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.AnswerOption, Enum.GetNames(typeof(Enums.QuestionOptions)).Select(e => new SelectListItem { Text = e }),
                        "Option", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.AnswerOption)
                </div>
            </div>
            <div class="col-md-6">
                @Html.LabelFor(model => model.IsActive, new { @class = "col-md-4" })
                <div class="col-md-12">
                    @Html.CheckBoxFor(model => model.IsActive, new { @class = "checkbox-inline" })IsActive?
                    @Html.ValidationMessageFor(model => model.IsActive)
                </div>
            </div>
        </div>
    </div>
}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
<script src="~/Scripts/ckeditor/ckeditor.js"></script>
}
