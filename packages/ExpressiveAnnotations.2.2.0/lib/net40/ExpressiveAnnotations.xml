<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ExpressiveAnnotations</name>
    </assembly>
    <members>
        <member name="T:ExpressiveAnnotations.Analysis.TokenType">
            <summary>
            Token identifier.
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.AND">
            <summary>
            Logical conjunction.
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.OR">
            <summary>
            Logical disjunction.
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.NOT">
            <summary>
            Logical negation.
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.GE">
            <summary>
            Greater than or equal to.
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.LE">
            <summary>
            Less than or equal to.
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.GT">
            <summary>
            Greater than.
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.LT">
            <summary>
            Less than.
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.EQ">
            <summary>
            Equal to.
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.NEQ">
            <summary>
            Not equal to.
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.ADD">
            <summary>
            Addition.
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.SUB">
            <summary>
            Subtraction.
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.MUL">
            <summary>
            Multiplication.
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.DIV">
            <summary>
            Division.
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.LEFT_BRACKET">
            <summary>
            Left bracket.
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.RIGHT_BRACKET">
            <summary>
            Right bracket.
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.COMMA">
            <summary>
            Comma.
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.NULL">
            <summary>
            NULL.
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.INT">
            <summary>
            Integer value.
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.BOOL">
            <summary>
            Boolean value.
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.FLOAT">
            <summary>
            Float value.
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.STRING">
            <summary>
            String.
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.FUNC">
            <summary>
            Function.
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.EOF">
            <summary>
            EOF.
            </summary>
        </member>
        <member name="T:ExpressiveAnnotations.Attributes.AssertThatAttribute">
            <summary>
            Validation attribute, executed for non-null annotated field, which indicates that assertion given in logical expression has to be satisfied, for such field to be considered as valid.
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Attributes.AssertThatAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ExpressiveAnnotations.Attributes.AssertThatAttribute"/> class.
            </summary>
            <param name="expression">The logical expression based on which requirement condition is computed.</param>
        </member>
        <member name="M:ExpressiveAnnotations.Attributes.AssertThatAttribute.Compile(System.Type,System.Boolean)">
            <summary>
            Parses and compiles expression provided to the attribute. Compiled lambda is then cached and used for validation purposes.
            </summary>
            <param name="validationContextType">The type of the object to be validated.</param>
            <param name="force">Flag indicating whether parsing should be rerun despite the fact compiled lambda already exists.</param>
        </member>
        <member name="M:ExpressiveAnnotations.Attributes.AssertThatAttribute.FormatErrorMessage(System.String,System.String)">
            <summary>
            Formats the error message.
            </summary>
            <param name="displayName">The user-visible name of the required field to include in the formatted message.</param>
            <param name="expression">The user-visible expression to include in the formatted message.</param>
            <returns>
            The localized message to present to the user.
            </returns>
        </member>
        <member name="M:ExpressiveAnnotations.Attributes.AssertThatAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validates the specified value with respect to the current validation attribute.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="validationContext">The context information about the validation operation.</param>
            <returns>
            An instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult"/> class.
            </returns>
            <exception cref="T:System.ArgumentNullException">validationContext;ValidationContext not provided.</exception>
        </member>
        <member name="P:ExpressiveAnnotations.Attributes.AssertThatAttribute.Expression">
            <summary>
            Gets or sets the logical expression based on which requirement condition is computed. 
            </summary>
        </member>
        <member name="T:ExpressiveAnnotations.Analysis.Token">
            <summary>
            Token definition.
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Token.#ctor(ExpressiveAnnotations.Analysis.TokenType,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ExpressiveAnnotations.Analysis.Token"/> class.
            </summary>
            <param name="type">The token identifier.</param>
            <param name="value">The token value.</param>
        </member>
        <member name="P:ExpressiveAnnotations.Analysis.Token.Type">
            <summary>
            Gets the token type.
            </summary>
        </member>
        <member name="P:ExpressiveAnnotations.Analysis.Token.Value">
            <summary>
            Gets the token value.
            </summary>        
        </member>
        <member name="T:ExpressiveAnnotations.Analysis.Lexer">
            <summary>
            Performs lexical analysis of provided logical expression.
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Lexer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ExpressiveAnnotations.Analysis.Lexer"/> class.
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Lexer.Analyze(System.String)">
            <summary>
            Analyzes the specified logical expression and extracts the array of tokens.
            </summary>
            <param name="expression">The logical expression.</param>
            <returns>
            Array of extracted tokens.
            </returns>
            <exception cref="T:System.ArgumentNullException">expression;Expression not provided.</exception>
        </member>
        <member name="T:ExpressiveAnnotations.Analysis.Parser">
            <summary>
            Performs syntactic analysis of provided logical expression within given context.
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Parser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ExpressiveAnnotations.Analysis.Parser"/> class.
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Parser.Parse``1(System.String)">
            <summary>
            Parses the specified logical expression into expression tree within given object context.
            </summary>
            <typeparam name="Context">The type identifier of the context within which the expression is interpreted.</typeparam>
            <param name="expression">The logical expression.</param>
            <returns>
            A delegate containing the compiled version of the lambda expression described by created expression tree.
            </returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Parser.Parse(System.Type,System.String)">
            <summary>
            Parses the specified logical expression and builds expression tree.
            </summary>
            <param name="context">The type instance of the context within which the expression is interpreted.</param>
            <param name="expression">The logical expression.</param>
            <returns>
            A delegate containing the compiled version of the lambda expression described by produced expression tree.
            </returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Parser.AddFunction``1(System.String,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Adds function signature to the parser context.
            </summary>
            <typeparam name="Result">Type identifier of returned result.</typeparam>
            <param name="name">Function name.</param>
            <param name="func">Function lambda.</param>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Parser.AddFunction``2(System.String,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Adds function signature to the parser context.
            </summary>
            <typeparam name="Arg1">First argument.</typeparam>
            <typeparam name="Result">Type identifier of returned result.</typeparam>
            <param name="name">Function name.</param>
            <param name="func">Function lambda.</param>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Parser.AddFunction``3(System.String,System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>
            Adds function signature to the parser context.
            </summary>
            <typeparam name="Arg1">First argument.</typeparam>
            <typeparam name="Arg2">Second argument.</typeparam>
            <typeparam name="Result">Type identifier of returned result.</typeparam>
            <param name="name">Function name.</param>
            <param name="func">Function lambda.</param>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Parser.AddFunction``4(System.String,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
            <summary>
            Adds function signature to the parser context.
            </summary>
            <typeparam name="Arg1">First argument.</typeparam>
            <typeparam name="Arg2">Second argument.</typeparam>
            <typeparam name="Arg3">Third argument.</typeparam>
            <typeparam name="Result">Type identifier of returned result.</typeparam>
            <param name="name">Function name.</param>
            <param name="func">Function lambda.</param>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Parser.GetFields">
            <summary>
            Gets properties names and types extracted from parsed expression within specified context.
            </summary>
            <returns>
            Dictionary containing names and types.
            </returns>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Parser.GetConsts">
            <summary>
            Gets constants names and values extracted from parsed expression within specified context.
            </summary>
            <returns>
            Dictionary containing names and values.
            </returns>
        </member>
        <member name="T:ExpressiveAnnotations.Attributes.RequiredIfAttribute">
            <summary>
            Validation attribute which indicates that annotated field is required when computed result of given logical expression is true.
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Attributes.RequiredIfAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ExpressiveAnnotations.Attributes.RequiredIfAttribute"/> class.
            </summary>
            <param name="expression">The logical expression based on which requirement condition is computed.</param>
        </member>
        <member name="M:ExpressiveAnnotations.Attributes.RequiredIfAttribute.Compile(System.Type,System.Boolean)">
            <summary>
            Parses and compiles expression provided to the attribute. Compiled lambda is then cached and used for validation purposes.
            </summary>
            <param name="validationContextType">The type of the object to be validated.</param>
            <param name="force">Flag indicating whether parsing should be rerun despite the fact compiled lambda already exists.</param>
        </member>
        <member name="M:ExpressiveAnnotations.Attributes.RequiredIfAttribute.FormatErrorMessage(System.String,System.String)">
            <summary>
            Formats the error message.
            </summary>
            <param name="displayName">The user-visible name of the required field to include in the formatted message.</param>
            <param name="expression">The user-visible expression to include in the formatted message.</param>
            <returns>
            The localized message to present to the user.
            </returns>
        </member>
        <member name="M:ExpressiveAnnotations.Attributes.RequiredIfAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validates the specified value with respect to the current validation attribute.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="validationContext">The context information about the validation operation.</param>
            <returns>
            An instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult"/> class.
            </returns>
            <exception cref="T:System.ArgumentNullException">validationContext;ValidationContext not provided.</exception>
        </member>
        <member name="P:ExpressiveAnnotations.Attributes.RequiredIfAttribute.Expression">
            <summary>
            Gets or sets the logical expression based on which requirement condition is computed. 
            </summary>
        </member>
        <member name="P:ExpressiveAnnotations.Attributes.RequiredIfAttribute.AllowEmptyStrings">
            <summary>
            Gets or sets a flag indicating whether the attribute should allow empty or whitespace strings.
            </summary>
        </member>
        <member name="T:ExpressiveAnnotations.Attributes.Toolchain">
            <summary>
            Contains a set of predefined methods.
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Attributes.Toolchain.RegisterMethods(ExpressiveAnnotations.Analysis.Parser)">
            <summary>
            Registers methods for expressions.
            </summary>
            <param name="parser">Parser.</param>
        </member>
    </members>
</doc>
